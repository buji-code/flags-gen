// Code generated by flags-gen. DO NOT EDIT.

package testdata

import (
	"github.com/spf13/pflag"
	"time"
)

// AddFlags adds all the flags from OperatorConfig to the given FlagSet
func (o *OperatorConfig) AddFlags(flags *pflag.FlagSet) {
	flags.StringSliceVar(&o.Controllers, "controllers", []string{"*"}, "Controllers is a list of controllers to enable. '*' enables all on-by-default controllers, 'foo' enables the controller named 'foo', '-foo' disables the controller named 'foo'.")
	flags.StringVar(&o.ProbeAddr, "probe-addr", ":8080", "ProbeAddr is the address the probe endpoint binds to.")
	flags.StringVar(&o.MetricsAddr, "metrics-addr", ":8443", "MetricsAddr is the address the metrics endpoint binds to.")
	flags.StringVar(&o.ProbeHealthEndpoint, "probe-health-endpoint", "healthz", "ProbeHealthEndpoint is the endpoint for the health probe.")
	flags.StringVar(&o.ProbeReadyEndpoint, "probe-ready-endpoint", "readyz", "ProbeReadyEndpoint is the endpoint for the ready probe.")
	flags.BoolVar(&o.EnableLeaderElection, "enable-leader-election", false, "EnableLeaderElection enables leader election for controller manager. Enabling this will ensure there is only one active controller manager.")
	flags.BoolVar(&o.ZapDevMode, "zap-dev-mode", false, "ZapDevMode enables development mode for zap logger. Enabling this will use human-readable output instead of structured JSON.")
	flags.IntVar(&o.V, "v", 0, "V is the log level for V logs.")
	flags.StringSliceVar(&o.RequiredCRDs, "required-cr-ds", []string{"eventing.knative.dev/v1/Broker", "eventing.knative.dev/v1/Trigger", "serving.knative.dev/v1/Service", "sources.knative.dev/v1/SinkBinding"}, "RequiredCRDs is a list of CRDs that must be present before starting the controller manager. Format: group/version/kind. Example: eventing.knative.dev/v1/Broker")
	flags.DurationVar(&o.RequiredCRDsGracePeriod, "required-cr-ds-grace-period", 30*time.Second, "RequiredCRDsGracePeriod is the grace period for the required CRDs to be present before starting the controller manager.")
	flags.StringVar(&o.RuntimeConfigMapName, "runtime-config-map-name", "runtime-configmap", "RuntimeConfigMapName is the name of the runtime config map.")
	flags.StringVar(&o.RuntimeConfigMapNamespace, "runtime-config-map-namespace", "", "RuntimeConfigMapNamespace is the namespace of the runtime config map.")
	flags.StringVar(&o.RuntimeConfigKey, "runtime-config-key", "runtime-config.yaml", "RuntimeConfigKey is the key of the runtime config in the configmap.")
}
