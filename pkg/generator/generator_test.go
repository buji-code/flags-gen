package generator

import (
	"strings"
	"testing"

	"github.com/yuvalwz/flags-gen/pkg/types"
)

func TestGenerator_GenerateFlags(t *testing.T) {
	generator := New()

	structInfo := types.StructInfo{
		Name:        "TestConfig",
		PackageName: "main",
		Imports:     []string{"time"},
		Fields: []types.FieldInfo{
			{
				Name:             "Host",
				Type:             "string",
				FlagName:         "host",
				Description:      "Server hostname",
				DefaultValue:     "localhost",
				DefaultValueCode: `"localhost"`,
				FlagMethod:       "StringVar",
			},
			{
				Name:             "Port",
				Type:             "int",
				FlagName:         "port",
				Description:      "Server port",
				DefaultValue:     8080,
				DefaultValueCode: "8080",
				FlagMethod:       "IntVar",
			},
			{
				Name:             "Debug",
				Type:             "bool",
				FlagName:         "debug",
				Description:      "Enable debug mode",
				DefaultValue:     false,
				DefaultValueCode: "false",
				FlagMethod:       "BoolVar",
			},
			{
				Name:             "Timeout",
				Type:             "time.Duration",
				FlagName:         "timeout",
				Description:      "Request timeout",
				DefaultValue:     "30s",
				DefaultValueCode: "30*time.Second",
				FlagMethod:       "DurationVar",
			},
		},
	}

	generated, err := generator.GenerateFlags(structInfo)
	if err != nil {
		t.Fatalf("GenerateFlags failed: %v", err)
	}

	// Check that the generated code contains expected elements
	expectedElements := []string{
		"// Code generated by flags-gen. DO NOT EDIT.",
		"package main",
		`import (`,
		`"github.com/spf13/pflag"`,
		`"time"`,
		"func (o *TestConfig) AddFlags(flags *pflag.FlagSet) {",
		`flags.StringVar(&o.Host, "host", "localhost", "Server hostname")`,
		`flags.IntVar(&o.Port, "port", 8080, "Server port")`,
		`flags.BoolVar(&o.Debug, "debug", false, "Enable debug mode")`,
		`flags.DurationVar(&o.Timeout, "timeout", 30*time.Second, "Request timeout")`,
	}

	for _, element := range expectedElements {
		if !strings.Contains(generated, element) {
			t.Errorf("Generated code missing expected element: %s", element)
			t.Errorf("Generated code:\n%s", generated)
		}
	}

	// Check that the generated code is valid Go (should compile without syntax errors)
	if !strings.HasPrefix(generated, "// Code generated by flags-gen. DO NOT EDIT.") {
		t.Error("Generated code should start with code generation comment")
	}

	// Check that it properly handles the imports
	if !strings.Contains(generated, `"time"`) {
		t.Error("Generated code should include time import when time.Duration is used")
	}
}

func TestGenerator_GenerateFlags_NoImports(t *testing.T) {
	generator := New()

	structInfo := types.StructInfo{
		Name:        "SimpleConfig",
		PackageName: "test",
		Imports:     []string{}, // No imports needed
		Fields: []types.FieldInfo{
			{
				Name:             "Name",
				Type:             "string",
				FlagName:         "name",
				Description:      "Application name",
				DefaultValue:     "",
				DefaultValueCode: `""`,
				FlagMethod:       "StringVar",
			},
		},
	}

	generated, err := generator.GenerateFlags(structInfo)
	if err != nil {
		t.Fatalf("GenerateFlags failed: %v", err)
	}

	// Should have simple import without parentheses
	expectedImport := `import "github.com/spf13/pflag"`
	if !strings.Contains(generated, expectedImport) {
		t.Errorf("Generated code should contain simple import: %s", expectedImport)
		t.Errorf("Generated code:\n%s", generated)
	}

	// Should not contain time import
	if strings.Contains(generated, `"time"`) {
		t.Error("Generated code should not contain time import when not needed")
	}
}

func TestGenerator_formatDefaultValue(t *testing.T) {
	generator := New()

	tests := []struct {
		value     interface{}
		fieldType string
		expected  string
	}{
		{"localhost", "string", `"localhost"`},
		{8080, "int", "8080"},
		{true, "bool", "true"},
		{false, "bool", "false"},
		{[]string{"web", "api"}, "[]string", `[]string{"web", "api"}`},
		{[]string{}, "[]string", "[]string{}"},
		{"30s", "time.Duration", "30s"},
	}

	for _, test := range tests {
		result := generator.formatDefaultValue(test.value, test.fieldType)
		if result != test.expected {
			t.Errorf("formatDefaultValue(%v, %s) = %s, expected %s", test.value, test.fieldType, result, test.expected)
		}
	}
}

func TestGenerator_getZeroValue(t *testing.T) {
	generator := New()

	tests := []struct {
		fieldType string
		expected  string
	}{
		{"string", `""`},
		{"int", "0"},
		{"bool", "false"},
		{"[]string", "[]string{}"},
		{"time.Duration", "0"},
		{"unknown", `""`},
	}

	for _, test := range tests {
		result := generator.getZeroValue(test.fieldType)
		if result != test.expected {
			t.Errorf("getZeroValue(%s) = %s, expected %s", test.fieldType, result, test.expected)
		}
	}
}